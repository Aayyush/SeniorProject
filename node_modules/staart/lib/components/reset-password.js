"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ooth_client_react_1 = require("ooth-client-react");
var recompose_1 = require("recompose");
var i18n_1 = require("../hocs/i18n");
var form_1 = require("./form");
var ResetPasswordComponent = function (_a) {
    var token = _a.token, userId = _a.userId, __ = _a.__;
    return (React.createElement("div", { style: {
            maxWidth: '300px',
            margin: 'auto',
        } },
        React.createElement("h1", null, __('reset-password.reset-password')),
        React.createElement(ResetPasswordForm, { token: token, userId: userId })));
};
var ResetPassword = recompose_1.compose(i18n_1.default)(ResetPasswordComponent);
exports.default = ResetPassword;
var ResetPasswordFormComponent = /** @class */ (function (_super) {
    __extends(ResetPasswordFormComponent, _super);
    function ResetPasswordFormComponent(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {};
        return _this;
    }
    ResetPasswordFormComponent.prototype.render = function () {
        var _this = this;
        var __ = this.props.__;
        if (!this.props.token) {
            return React.createElement("p", null, __('reset-password.no-token-specified'));
        }
        if (!this.props.userId) {
            return React.createElement("p", null, __('reset-password.no-userid-specified'));
        }
        if (this.state.sent) {
            return (React.createElement("p", null,
                __('reset-password.password-reset'),
                " ",
                React.createElement("a", { href: "/login" }, __('reset-password.login')),
                ' ',
                __('reset-password.with-new-password')));
        }
        return (React.createElement(form_1.default, { onSubmit: function () {
                var password = _this.password.value;
                var password2 = _this.password2.value;
                if (password !== password2) {
                    console.error(__('reset-password.passwords-dont-match'));
                    return;
                }
                _this.props.oothClient
                    .method('local', 'reset-password', {
                    userId: _this.props.userId,
                    token: _this.props.token,
                    newPassword: password,
                })
                    .then(function () {
                    _this.setState({
                        sent: true,
                    });
                });
            }, state: this.state.state, message: this.state.message, submitLabel: __('reset-password.reset-password') },
            React.createElement("div", { className: "form-group" },
                React.createElement("label", { htmlFor: "password" }, __('reset-password.new-password')),
                React.createElement("input", { type: "password", className: "form-control", id: "password", placeholder: "******", ref: function (password) {
                        _this.password = password;
                    } })),
            React.createElement("div", { className: "form-group" },
                React.createElement("label", { htmlFor: "password2" }, __('reset-password.repeat-new-password')),
                React.createElement("input", { type: "password", className: "form-control", id: "password2", placeholder: "******", ref: function (password2) {
                        _this.password2 = password2;
                    } }))));
    };
    return ResetPasswordFormComponent;
}(React.Component));
var ResetPasswordForm = recompose_1.compose(ooth_client_react_1.withOoth, i18n_1.default)(ResetPasswordFormComponent);
